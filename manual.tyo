title: Typography
subtitle: Document generator
author: Tim Nieradzik

.chapter[Introduction] {
	.i{Typography} is a frontend for the .url[http://github.com/tindzk/Jivai/blob/master/src/Ecriture.c]{Ecriture markup}.

	Its purpose is to create well-formatted documents without much effort. Therefore, Typography offers various features which facilitate styling and structuring texts.

	Although Typography ships a console frontend, you can still use Typography in your own projects. As the source code is separated into a library and an application part, the code base is ready to be used externally. For instance, .url[../blogd]{blogd} already uses Typography for rendering its blog articles.
}

.chapter[Installation] {
	.section[Requirements] {
		For Typography to compile, make sure to have these prerequisites installed:

		.list {
			.item{.url[../Jivai]{Jivai}}
			.item{.url[../Depend]{Depend}}
			.item{.url[../tplgen]{tplgen}}
		}
	}

	.section[Checkout] {
		.command {
			$ git clone git://github.com/tindzk/Typography.git
		}
	}

	.section[Compile] {
		.command {
			$ cd Typography ; ./Build.sh
		}
	}
}

.chapter[Document Structure] {
	Like in mails and HTTP requests, a document consists of two parts: a header and a body. This allows better separation between meta information like title, author etc. and actual contents.

	As the header is written in the YAML markup, nesting is possible, too. By default, Typography does not make use of this feature though.

	The body is written in the Ecriture markup which is more suitable for text as inline commands can be used whereas YAML is line-oriented.

	An imaginary example for illustrating the structure is:

	.code {{
		meta1: value
		meta2: value
		meta3: value

		This is a .command{command's value}.
	}}

	Header and body must be separated by an empty line. Headers cannot be set or overwritten in the body.
}

.chapter[Usage] {
	Typography requires at least one parameter which is the path to the document. To generate this manual, run:

	.command {
		$ ./Typography.bin manual.tyo
	}

	This prints the HTML output to .i{stdout}.

	Additionally, you can specify a second parameter for the base path in which the CSS file (.path{style.css}) is stored.

	Typography documents must have the extension .path{.tyo}.
}

.chapter[Your First Document] {
	To get familiar with Typography, here's a simple document:

	.code {{
		title: Document Title
		author: Author
		toc: Table of Contents

		.chapter[Chapter name] {
			Chapter description

			.section[Section name] {
				Section contents.
			}

			.section[Second Section] {
				First paragraph.

				Second paragraph.
			}
		}
	}}

	.keyword{toc} sets the name for the table of contents. The value is not hard-coded as Typography aims to be language agnostic. If you don't set .keyword{toc}, the table of contents is left away.

	The Typography console client already comes with automatic paragraph detection. This feature can be disabled in the library mode though.
}

.chapter[Commands] {
	A document written in Typography is basically a sequence of (nested) commands surrounded by text. Commands are comparable to functions in programming languages. Hence, some commands may even accept options.

	A typical command is used like this: .keyword{.cmd\{value\}}. Parameters are generally optional. They can be specified using square brackets: .keyword{.cmd\[param\]\{value\}}.

	.section[Chapters and Sections] {
		.keyword{chapter} is a top-level command, i.e. it cannot be used within other blocks.

		Chapters are automatically added to the table of contents. Sometimes it's desired to subdivide the contents of a chapter. Therefore, chapters may also contain sections (.keyword{.section\{...\}}). However, the generated table of contents won't cover any links to sections.
	}

	.section[Style] {
		The following styles are supported:

		.list {
			.item{b (.b{bold})}
			.item{i (.i{italic})}
			.item{class (.class{ClassName})}
			.item{func (.func{main})}
			.item{var (.var{var})}
			.item{macro (.macro{macro})}
			.item{term (.term{1 + 2})}
			.item{keyword (.keyword{Typography})}
			.item{path (.path{/root})}
			.item{number (.number{8080})}
		}

		Styles only format the given text, i.e. they don't require any options.
	}

	.section[Blocks] {
		Typography supports .keyword{blocks}. Their purpose is to inline texts. Notes (.keyword{note}) and warnings (.keyword{warning}) are supported:

		.note {
			Note block
		}

		.warning {
			Warning block
		}
	}

	.section[Lists] {
		A list is initialized using the .keyword{list} command. Within a list, there cannot be other elements than .keyword{item}s:

		.code {{
			.list {
				.item{Item 1}
				.item{Item 2}
			}
		}}
	}

	.section[Paragraphs] {
		Typography does not detect paragraphs automatically. To force a paragraph, the corresponding text needs to be surrounded by a .keyword{p} command.
	}

	.section[Footnotes] {
		To define a footnote.footnote{This is a footnote.}, use the .keyword{footnote} command.
	}

	.section[Code] {
		Typography offers code and shell blocks which preserve indenting:

		.list {
			.item{code: Programming code}
			.item{command: Shell command(s)}
		}

		For example, this

		.code {{
			.command {
				$ ls -lah
			}

			.code {{
				int main(void) {
					return EXIT_SUCCESS;
				}
			\}}
		}}

		will render to:

		.command {
			$ ls -lah
		}

		.code {{
			int main(void) {
				return EXIT_SUCCESS;
			}
		}}
	}

	.section[Anchors] {
		Anchors are invisible markers which can be set throughout the whole document and jumped to.

		An anchor needs to be initialized using the .keyword{anchor} command.

		.anchor{jump}
		A link pointing to an anchor can be generated using .keyword{jump}.
	}

	.section[Links] {
		The following types of links are supported:

		.list {
			.item{.i{mail}: E-mail address (.mail[user@example.com]{user@example.com})}
			.item{.i{url}: URL (.url[http://www.example.com/]{example.com})}
		}

		The usage of a link is similar to an .jump[jump]{anchor jumpers'}:

		.code {{
			.url[http://www.google.com/]{Google}
			.url[john@example.com]{John Smith}
		}}
	}
}

.chapter[Appendix] {
	.section[License] {
		Licensed under the EUPL, Version 1.1 only (the .i{"Licence"}); You may not use this work except in compliance with the Licence.
	}

	.section[See also] {
		.list {
			.item{.url[http://github.com/tindzk/Typography]{Browse source}}
			.item{.url[http://github.com/tindzk/Typography/issues]{Bug tracker}}
			.item{.url[http://tindzk.github.com/]{Other projects}}
			.item{.mail[tim.nieradzik@gmx.de]{Contact}}
		}
	}
}
